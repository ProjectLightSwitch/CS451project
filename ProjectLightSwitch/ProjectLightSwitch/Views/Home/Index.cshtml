@{
    ViewBag.Title = "Home Page";
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <h1>Project Lightswitch</h1>
        </div>
    </section>
}

@section scripts
{
    <script language="javascript" type="text/javascript">
        @{
<text>




    function TagNavigator(container, editContainer, options) {
        if (typeof container == 'string') {
            container = $('#' + container);
        }
        if (!container || !container.length) {
            throw "Tag navigation container not found.";
        }
        if (typeof editContainer == 'string') {
            editContainer = $('#' + editContainer);
        }
        if (!editContainer || !editContainer.length) {
            editContainer = null;
        }

        this.container = container;
        this.editContainer = editContainer;

        this.selectedEndTags = {};
        this.hierarchicalTagContainer = null;
        this.selectedBreadcrumbsContainer = null;

        // Set defaults
        this.options = {
            selectedTagSubmissionName: "SelectedTags[{0}]",
            ajax_getChildrenUrl: "/Tags/GetChildTags",
            selectedClassName: "sel",
            editable: editContainer == null,
            pathSeparator: ' > '
        };

        //
        var providedOptionKeys = Object.keys(options);
        for (var providedOptionKey in providedOptionKeys) {
            this.options[providedOptionKey] = options[providedOptionKey];
        }

        // PRIVATES
        var hiddenInputContainerName = "selTagInputs";
        var hierarchyContainerDivName = "tags";
        var selectedBreadcrumbsUlName = "selectedTags";
        var editDivClassname = "editForm";
        var selectedTagClassname = "sel";
        var tagIdAttr = "data-tagid";
        var depthAttr = "data-depth";

        this.init();
    }

    TagNavigator.prototype.init = function () {
        this.container.children().remove();
            
        this.hierarchicalTagContainer = $('<div>').addClass(hierarchyContainerDivName);
        this.selectedBreadcrumbsContainer = $('<ul>').addClass(selectedBreadcrumbsUlName);

        this.container.append(
            this.selectedBreadcrumbsContainer).append(
            this.hierarchicalTagContainer).append(
            // See: http://www.quirksmode.org/css/clearing.html for possible workaround
            $('<br>').attr('clear', 'left')
        );

        if(editable)
        {
            
            this.populateEditForm();
        }

        // Hook into form submission
        var tagnav = this;
        $(document).ready(function () {
            tagnav.container.closest('form').submit(function () { tagnav.injectHiddenFields(); });
        });
    };

    TagNavigator.prototype.togglePerTagEditForm = function (status)
    {
        this.editContainer.css('display', status ? 'block' : 'none');
    }

    // This assumes the tagnav is placed inside a form
    TagNavigator.prototype.injectHiddenFields = function()
    {
        var tagnav = this;
        var tagIds = Object.keys(this.selectedEndTags);
        $.each(tagIds, function (index, result) {
            $('<input>').attr({
                'name': tagnav.options.selectedTagSubmissionName.replace('{0}', index),
                'value': result,
                'type': 'hidden'
            }).appendTo(tagnav.container);
        });
    }

    TagNavigator.prototype.getHierarchicalListItemName = function (tagId) {
        return "tagnav_tag_" + tagId;
    }


    TagNavigator.prototype.findByName = function (name, parent) {
        var selector = '[name="' + name + '"]';
        return (!parent || !parent.length)
            ? this.container.find(selector)
            : parent.find(selector);
    }

    TagNavigator.prototype.endTagSelected = function(tagId, status)
    {
        var container = this.hierarchicalTagContainer.find('[' + tagnavOptions.tagIdAttr + '="' + tagId + '"]');

        depth = parseInt(container.attr(tagnavOptions.depthAttr));
        name = container.find("label").text();

        if (status) {
            // Add to internal list of selected tags
            this.selectedEndTags[tagId] = true;

            // Create breadcrumb
            var path = [];
            var navItems = $(tagnavOptions.tagnavHierarchySelector + " > ul").slice(1, depth + 1);
            navItems.each(function (index) {
                path.push($(this).attr('data-parent_name'));
            });
            path.push(name);

            // Add breadcrumb
            tagNavigator = this;
            $('<li />').attr(tagIdAttr, tagId).text(path.join(this.options.pathSeparator)).append($('<a>').attr('href','#').click(function () {
                    tagNavigator.endTagSelected(tagId, false);
                }).text('X')).appendTo(this.selectedBreadcrumbsContainer);
        }
        else {

            // Delete from internal list of selected tags
            delete this.selectedEndTags[tagId];

            // Delete list item in breadcrumbs
            this.selectedBreadcrumbsContainer.find('[' + tagIdAttr + '="' + tagId + '"]').remove();

            //Uncheck box
            this.hierarchicalTagContainer.find('[' + tagIdAttr + '="' + tagId + '"] input[type="checkbox"]').attr("checked", "false");
        }
    }

    TagNavigator.prototype.tagSelected =function (parentId, name, type, depth) {
        $.ajax({
            cache: false,
            data: {'parent':parentId},
            url: this.options.ajax_getChildrenUrl,
            type: "GET"
        }).success(function(results) {
            // Clear tags at higher or equal depth than selected
            this.hierarchicalTagContainer.find("ul:eq(" + (depth + 1) + "), ul:eq(" + (depth + 1) + ") ~ ul").remove();

            var ul = $('<ul>').attr(depthAttr, depth + 1).attr({ "data-parent_id": parentId, "data-parent_name": name });

            var tagNavigator = this;
            $.each(results, function (index, result) {
                if( result.TagType == '@((byte)ProjectLightSwitch.Models.Enums.TagType.NavigationalTag)' )
                {
                    $('<li>').attr(depthAttr, depth + 1).attr(tagIdAttr, result.TagId).addClass("nav_tlt").html(
                        $('<a>').attr('href','#').click(function () {
                            tagNavigator.tagSelected(result.TagId, result.EnglishText, result.TagType, depth + 1);
                            return false;
                        }).text(result.EnglishText + '->')).appendTo(ul);
                }
                else if (result.TagType == '@((byte)ProjectLightSwitch.Models.Enums.TagType.SelectableTag)')
                {
                    var isChecked = selectedEndTags[result.TagId] === true;
                    $('<li>').attr(depthAttr, depth + 1).attr(tagIdAttr, result.TagId).addClass("nav_tag").html(
                        $('<label></label>').attr({ 'for': 'tagnav_' + result.TagId }).text(result.EnglishText).after(
                        $('<input />').change(function () {
                            tagNavigator.endTagSelected(result.TagId, $(this)[0].checked);
                        }).attr({ 'name': 'tagnav_' + result.TagId, 'type': 'checkbox', 'checked': isChecked })
                   )).appendTo(ul);
               }
            });
            ul.appendTo(container).fadeIn('fast');

        });
        return false;
    }
</text>
}
    </script>
}


Tab Navigator:
@{Html.RenderAction("TagNavigator", "Tags");}


